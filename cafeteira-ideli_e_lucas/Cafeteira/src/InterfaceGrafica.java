
import armazem.ArmazemCopo;
import armazem.ArmazemIngrediente;
import armazem.ArmazemMoeda;
import core.Armazem;
import core.Copo;
import core.Ingrediente;
import core.Mensagens;
import core.Moeda;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import core.Tecnico;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import static javax.swing.JOptionPane.showMessageDialog;
import programa.Maquina;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author iderli
 */
public class InterfaceGrafica extends javax.swing.JFrame {
    ArrayList<Tecnico> tecnicos = new ArrayList();
    ArrayList<Object> bebidas = new ArrayList();
    public Armazem objArmazemCopo;
    public Armazem objArmazemin;
    public Armazem objArmazemMoeda;
    Mensagens mensagens = new Mensagens();
    ArrayList<String> receitas = null;
    Maquina cafeteira = null;
    String itemSelecionado = null;
    String itemConvertivo = null;
    String nivelAcucar = null;
    int acucarConvertido = 0;
    int valorDepositado = 0;
    
    
    /**
     * Creates new form interfaceGrafica
     */
    public InterfaceGrafica() throws FileNotFoundException {
        initComponents();
        criarTecnicos();
        desabilitarBotoes();
        abrirRecursos();
        listviewValor.add("Valor total depositado: "+ valorDepositado);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1 = new java.awt.List();
        expressoBotao = new javax.swing.JButton();
        cappuccinoBotao = new javax.swing.JButton();
        cafeComLeiteBotao = new javax.swing.JButton();
        chocolateQuenteBotao = new javax.swing.JButton();
        copovazio = new javax.swing.JLabel();
        loginTecnico = new javax.swing.JButton();
        jpanel = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        moedaCampo = new javax.swing.JTextField();
        listview = new java.awt.List();
        listviewValor = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        expressoBotao.setText("Cafe expresso");
        expressoBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressoBotaoActionPerformed(evt);
            }
        });

        cappuccinoBotao.setText("Cappuccino");
        cappuccinoBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cappuccinoBotaoActionPerformed(evt);
            }
        });

        cafeComLeiteBotao.setText("Cafe com leite");
        cafeComLeiteBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cafeComLeiteBotaoActionPerformed(evt);
            }
        });

        chocolateQuenteBotao.setText("Chocolate quente");
        chocolateQuenteBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocolateQuenteBotaoActionPerformed(evt);
            }
        });

        loginTecnico.setText("Tecnico");
        loginTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginTecnicoActionPerformed(evt);
            }
        });

        jButton5.setText("Inserir Moeda");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        moedaCampo.setText("0");
        moedaCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moedaCampoActionPerformed(evt);
            }
        });
        moedaCampo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                moedaCampoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jpanelLayout = new javax.swing.GroupLayout(jpanel);
        jpanel.setLayout(jpanelLayout);
        jpanelLayout.setHorizontalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                        .addComponent(moedaCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
        );
        jpanelLayout.setVerticalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moedaCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        listview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listviewMouseClicked(evt);
            }
        });
        listview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chocolateQuenteBotao)
                            .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cafeComLeiteBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cappuccinoBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(copovazio, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(listviewValor, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(expressoBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addComponent(listview, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(loginTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(expressoBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cappuccinoBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cafeComLeiteBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(chocolateQuenteBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(listviewValor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(listview, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loginTecnico)))
                .addGap(96, 96, 96)
                .addComponent(copovazio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginTecnicoActionPerformed
        
        Login login = new Login(tecnicos, cafeteira, this);
        
        login.setVisible(true);
        
        this.setVisible(false);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_loginTecnicoActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       if(moedaCampo.getText().isEmpty()){
           this.mensagens.mensagemTela("Nenhuma moeda inserida");
       }else{
        
        int moeda = Integer.parseInt(moedaCampo.getText());
       switch (moeda){
           case 5:
               
               Moeda moedaAtual = new Moeda("cinco", 5);
               listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
               for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
                   if(cafeteira.objCofre.moedasInternas.get(i).getMoeda().getValor()==moeda){
                       boolean status = cafeteira.contador.verificarMoeda(moedaAtual, cafeteira.objCofre.moedasInternas.get(i));
                       
                       if(status){
                           valorDepositado +=moeda;
                           listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                           this.mensagens.mensagemTela("Moeda inserida");
                       }else{
                           this.mensagens.mensagemTela("Nao foi possivel inserir sua moeda."
                                   + "Retornando moeda de " + moeda + "centavos");
                       }
                   
                   }
               }
               
               
               break;
           case 10:
                 Moeda moedaAtual1 = new Moeda("dez", 10);
               for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
                   if(cafeteira.objCofre.moedasInternas.get(i).getMoeda().getValor()==moeda){
                       boolean status = cafeteira.contador.verificarMoeda(moedaAtual1, cafeteira.objCofre.moedasInternas.get(i));
                       
                       if(status){
                           valorDepositado +=moeda;
                           listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                            this.mensagens.mensagemTela("Moeda inserida");
                       }else{
                           this.mensagens.mensagemTela("Nao foi possivel inserir sua moeda."
                                   + "Retornando moeda de " + moeda + "centavos");
                       }
                   
                   }
               }
               
               
              
               break;
           case 25:
               
                 Moeda moedaAtual2 = new Moeda("vinte", 25);
               for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
                   if(cafeteira.objCofre.moedasInternas.get(i).getMoeda().getValor()==moeda){
                       boolean status = cafeteira.contador.verificarMoeda(moedaAtual2, cafeteira.objCofre.moedasInternas.get(i));
                       
                       if(status){
                           valorDepositado +=moeda;
                           listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                           this.mensagens.mensagemTela("Moeda inserida");
                       }else{
                           this.mensagens.mensagemTela("Nao foi possivel inserir sua moeda."
                                   + "Retornando moeda de " + moeda + "centavos");
                       }
                   
                   }
               }
               
               break;
           case 50:
               
                Moeda moedaAtual3 = new Moeda("cinquenta", 50);
               for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
                   if(cafeteira.objCofre.moedasInternas.get(i).getMoeda().getValor()==moeda){
                       boolean status = cafeteira.contador.verificarMoeda(moedaAtual3, cafeteira.objCofre.moedasInternas.get(i));
                       
                       if(status){
                           valorDepositado +=moeda;
                           listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                           this.mensagens.mensagemTela("Moeda inserida");
                       }else{
                           this.mensagens.mensagemTela("Nao foi possivel inserir sua moeda."
                                   + "Retornando moeda de " + moeda + "centavos");
                       }
                   
                   }
               }
              
               break;
           case 100:
               
                Moeda moedaAtual4 = new Moeda("um", 100);
               for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
                   if(cafeteira.objCofre.moedasInternas.get(i).getMoeda().getValor()==moeda){
                       
                       boolean status = cafeteira.contador.verificarMoeda(moedaAtual4, cafeteira.objCofre.moedasInternas.get(i));
                       
                       if(status){
                           valorDepositado +=moeda;
                           listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                           this.mensagens.mensagemTela("Moeda inserida");
                       }else{
                           this.mensagens.mensagemTela("Nao foi possivel inserir sua moeda."
                                   + "Retornando moeda de " + moeda + "centavos");
                       }
                   
                   }
               }
               break;
           case 0:
               this.mensagens.mensagemTela("Nenhuma moeda inserida");
               break;
           default:
               this.mensagens.mensagemTela("Insira uma moeda valida");
               break;
               
         }
       
       moedaCampo.setText("0");
       }
              
    }//GEN-LAST:event_jButton5ActionPerformed

    private void moedaCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moedaCampoActionPerformed
        
        // TODO add your handling code here:
    }//GEN-LAST:event_moedaCampoActionPerformed

    private void moedaCampoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moedaCampoKeyTyped
        String caracteres = "0987654321";
        if (!caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }
    }//GEN-LAST:event_moedaCampoKeyTyped

    private void listviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listviewActionPerformed
     
   
        
    }//GEN-LAST:event_listviewActionPerformed

    private void expressoBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressoBotaoActionPerformed
        listview.clear();
        listview.setEnabled(true);
        for(int i=0;i<receitas.size(); i++){
             if(receitas.get(i).equalsIgnoreCase("Café Expresso (P)") || 
                    receitas.get(i).equalsIgnoreCase("Café Expresso (M)") || 
                    receitas.get(i).equalsIgnoreCase("Café Expresso (G)")){
                    int valor = cafeteira.objLivroReceitas.procuraReceitaLivro(receitas.get(i)).getValor();
                    DecimalFormat formatador = new DecimalFormat("###,##0.00");
                  
                    double valorCorreto = valor*0.01;
                    String valorConvertido = formatador.format(valorCorreto);
                    
                    listview.add(receitas.get(i) +"  valor: " + valorConvertido);
                    
             }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_expressoBotaoActionPerformed

    private void listviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listviewMouseClicked
          
        if(listview.getItem(0).equalsIgnoreCase("Açucar: S: 0gr")){
            nivelAcucar = listview.getSelectedItem();
            
            
            double valorPago = converterValorPago();
            double valorBebida = converterValor();
            
            if(valorPago !=0 && valorBebida != 0){
                
            
            ArrayList<Moeda> moedas = pegarMoedas();
            ArrayList<Moeda> todasMoedas = criarListaMoeda();
            String[] troco = cafeteira.contador.verificarTroco(valorBebida, valorPago, todasMoedas
            , cafeteira.objCofre);
            this.mensagens.mensagemTela(troco[0]);
            
            String item = converterItemSelecionado();
            System.out.println(itemConvertivo);
            if(troco[1].equalsIgnoreCase("true")){
                
                this.valorDepositado = 0;
                listviewValor.clear();
                listviewValor.add("Valor total depositado: "+ valorDepositado);
                cafeteira.prepararBebida(item, converterAcucar());
                
                
                try {
                    listview.clear();
                    abrirRecursos();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }
            
            }else{
                this.mensagens.mensagemTela("Insira moedas na maquina antes de selecionar uma bebida");
            }
        }else{
        
          itemSelecionado = listview.getSelectedItem();
          itemConvertivo = itemSelecionado;
          
          listview.clear();
          listview.add("Açucar: S: 0gr");
        if(cafeteira.objDispensa.procurarDispensaIngrediente("açucar").getQuantidade()>=5){
            listview.add("Açucar: P: 5gr");
        }
         if(cafeteira.objDispensa.procurarDispensaIngrediente("açucar").getQuantidade()>=8){
            listview.add("Açucar: M: 8gr");
        }
         
         if(cafeteira.objDispensa.procurarDispensaIngrediente("açucar").getQuantidade()>=12){
            listview.add("Açucar: G: 12gr");
        }
        }
        
    }//GEN-LAST:event_listviewMouseClicked

    private void cappuccinoBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cappuccinoBotaoActionPerformed


  listview.clear();
        listview.setEnabled(true);
        for(int i=0;i<receitas.size(); i++){
             if(receitas.get(i).equalsIgnoreCase("Cappuccino (P)") || 
                    receitas.get(i).equalsIgnoreCase("Cappuccino (M)") || 
                    receitas.get(i).equalsIgnoreCase("Cappuccino (G)")){
                    int valor = cafeteira.objLivroReceitas.procuraReceitaLivro(receitas.get(i)).getValor();
                    DecimalFormat formatador = new DecimalFormat("###,##0.00");
                  
                    double valorCorreto = valor*0.01;
                    String valorConvertido = formatador.format(valorCorreto);
                    
                    listview.add(receitas.get(i) +"  valor: " + valorConvertido);
                    
             }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cappuccinoBotaoActionPerformed

    private void cafeComLeiteBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cafeComLeiteBotaoActionPerformed
  listview.clear();
        listview.setEnabled(true);
        for(int i=0;i<receitas.size(); i++){
             if(receitas.get(i).equalsIgnoreCase("Café com Leite (P)") || 
                    receitas.get(i).equalsIgnoreCase("Café com Leite (M)") || 
                    receitas.get(i).equalsIgnoreCase("Café com Leite (G)")){
                    int valor = cafeteira.objLivroReceitas.procuraReceitaLivro(receitas.get(i)).getValor();
                    DecimalFormat formatador = new DecimalFormat("###,##0.00");
                  
                    double valorCorreto = valor*0.01;
                    String valorConvertido = formatador.format(valorCorreto);
                    
                    listview.add(receitas.get(i) +"  valor: " + valorConvertido);
                    
             }
        }       
        

// TODO add your handling code here:
    }//GEN-LAST:event_cafeComLeiteBotaoActionPerformed

    private void chocolateQuenteBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocolateQuenteBotaoActionPerformed
  listview.clear();
        listview.setEnabled(true);
        for(int i=0;i<receitas.size(); i++){
             if(receitas.get(i).equalsIgnoreCase("Chocolate Quente (P)") || 
                    receitas.get(i).equalsIgnoreCase("Chocolate Quente (M)") || 
                    receitas.get(i).equalsIgnoreCase("Chocolate Quente (G)")){
                    int valor = cafeteira.objLivroReceitas.procuraReceitaLivro(receitas.get(i)).getValor();
                    DecimalFormat formatador = new DecimalFormat("###,##0.00");
                  
                    double valorCorreto = valor*0.01;
                    String valorConvertido = formatador.format(valorCorreto);
                    
                    listview.add(receitas.get(i) +"  valor: " + valorConvertido);
                    
             }
        }       

        // TODO add your handling code here:
    }//GEN-LAST:event_chocolateQuenteBotaoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new InterfaceGrafica().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cafeComLeiteBotao;
    private javax.swing.JButton cappuccinoBotao;
    private javax.swing.JButton chocolateQuenteBotao;
    private javax.swing.JLabel copovazio;
    private javax.swing.JButton expressoBotao;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jpanel;
    private java.awt.List list1;
    private java.awt.List listview;
    private java.awt.List listviewValor;
    private javax.swing.JButton loginTecnico;
    private javax.swing.JTextField moedaCampo;
    // End of variables declaration//GEN-END:variables

    private void criarTecnicos() {
        int senha1 = 12345;
        int senha2 = 54321;
        int senha3 = 12324;
        int senha4 = 32123;
        
        Tecnico tecnico1 = new Tecnico (senha1);
        Tecnico tecnico2 = new Tecnico (senha2);
        Tecnico tecnico3 = new Tecnico (senha3);
        Tecnico tecnico4 = new Tecnico (senha4);
        
        tecnicos.add(tecnico1);
        tecnicos.add(tecnico2);
        tecnicos.add(tecnico3);
        tecnicos.add(tecnico4);

    }


    private void abrirRecursos() throws FileNotFoundException {
        
        cafeteira = new Maquina("teste.txt");
        
        receitas = cafeteira.barista.mostrarReceitasValidas();
        for(int i=0;i<receitas.size();i++){
            if(receitas.get(i).equalsIgnoreCase("Café Expresso (P)") || 
                    receitas.get(i).equalsIgnoreCase("Café Expresso (M)") || 
                    receitas.get(i).equalsIgnoreCase("Café Expresso (G)")){
                expressoBotao.setEnabled(true);
            }
            if(receitas.get(i).equalsIgnoreCase("Cappuccino (P)") || 
                    receitas.get(i).equalsIgnoreCase("Cappuccino (M)") || 
                    receitas.get(i).equalsIgnoreCase("Cappuccino (G)")){
                cappuccinoBotao.setEnabled(true);
            }
            if(receitas.get(i).equalsIgnoreCase("Café com Leite(P)") || 
                    receitas.get(i).equalsIgnoreCase("Café com Leite (M)") || 
                    receitas.get(i).equalsIgnoreCase("Café com Leite (G)")){
                cafeComLeiteBotao.setEnabled(true);
            }
            if(receitas.get(i).equalsIgnoreCase("Chocolate Quente (P)") || 
                    receitas.get(i).equalsIgnoreCase("Chocolate Quente (M)") || 
                    receitas.get(i).equalsIgnoreCase("Chocolate Quente (G)")){
                chocolateQuenteBotao.setEnabled(true);
            }
                
                
            
            listview.add(receitas.get(i));
        }
        
        listview.setEnabled(false);
        
       

       
        
    }

    private void desabilitarBotoes() {

        expressoBotao.setEnabled(false);
        cappuccinoBotao.setEnabled(false);
        cafeComLeiteBotao.setEnabled(false);
        chocolateQuenteBotao.setEnabled(false);
    }

    private double converterValor() {
         try{
    String valor[] = new String[2];
    
             System.out.println(itemSelecionado);
    valor = itemSelecionado.split(": ");
   
     valor[1] = valor[1].replaceAll(",", ".");
             System.out.println(valor[1]);

        return Double.parseDouble(valor[1]);
         }catch(ArrayIndexOutOfBoundsException e){
             System.out.println("necesario inserir moedas");
         }
        return 0;
        
    };

    private double converterValorPago() {
        
        try{
        DecimalFormat formatador = new DecimalFormat("###,##0.00");
                  
        double valorCorreto = valorDepositado*0.01;
        String valorConvertido = formatador.format(valorCorreto);
        valorConvertido = valorConvertido.replaceAll(",", ".");

        return Double.parseDouble(valorConvertido);
        }catch(ArrayIndexOutOfBoundsException e){
             System.out.println("necesario inserir moedas");
         }
        return 0;


    }

    private ArrayList<Moeda> pegarMoedas() {

        ArrayList<Moeda> moedas = new ArrayList();
        for(int i=0; i<cafeteira.objCofre.moedasInternas.size();i++){
            moedas.add(cafeteira.objCofre.moedasInternas.get(i).getMoeda());
        }
            
        return moedas;

    }

    private ArrayList<Moeda> criarListaMoeda() {
        ArrayList<Moeda> moedas = new ArrayList();
        
        for(int i=0;i<cafeteira.objCofre.moedasInternas.size();i++){
            for(int j=0;j<cafeteira.objCofre.moedasInternas.get(i).getQuantidade();j++){
                moedas.add(cafeteira.objCofre.moedasInternas.get(i).getMoeda());
            }
        }

        return moedas;

        

    };

    private int converterAcucar() {
        try{
        String acucares = "Açucar: S: 0gr";
        String valor[] = new String[3];

    valor = acucares.split(": ");
    
    String valor1[] = new String[2];
    valor1 = valor[2].split("g");
        return Integer.parseInt(valor1[0]);
        }catch(ArrayIndexOutOfBoundsException e){
             System.out.println("necesario selecionar nivel de açucar");
         }
        return 0;
    };
        
    private String converterItemSelecionado() {
         try{
             String item = itemSelecionado;
             System.out.println("ESSE E O PRIMEIRO ITEM: "+ item);
     String valor[] = new String[2];
    valor = item.split("  v");

       item = valor[0];
       return item;
         }catch(ArrayIndexOutOfBoundsException e){
             System.out.println("necesario selecionar bebida");
         }
        return itemSelecionado;
    };

    
    
}
